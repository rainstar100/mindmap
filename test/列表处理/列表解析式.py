# a=[1,2,3]
# b=[i**2 for i in a] #返回一个列表（元素是对源列表元素的处理结果），类似与导致语句，前面是表达式/循环体，后面是for循环头 ,就是对元素都进行一个操作
# def cub(i):
#     return i*i*i
# c=map(cub,a) # 对列表中的元素操作后，返回一个迭代对象，而不是一个列表
# print(b)
# for i in c:
#     print(i)

# #

a=[1,2,3,4,5]
b=[]
print([b.append(i) for i in a ])  #返回[none,none,none,none] bug!!!!!!!! 在列表的推导过程中添加元素到列表是一个迭代过程，不是列表推导式
##列表推导式与for循环对比
'''
for 循环对元素任意操作，返回任意结果，
列表推导式，只能返回一个新列表，不能进行添加元素到另一列表，这样的迭代过程。
在不超过内存的情况下，列表推导式速度快
生成器适合超过内存的情况
'''